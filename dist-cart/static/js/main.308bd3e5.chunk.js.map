{"version":3,"sources":["components/pop-cart/index.js","pages/products/index.js","pages/cart/index.js","App.js","serviceWorker.js","store/products/index.js","store/index.js","store/cart/index.js","index.js"],"names":["columns","deleteProd","title","dataIndex","key","render","row","size","onClick","content","props","useStore","state","dispatch","getter","useGetter","id","type","prodId","dataSource","cartProducts","totalCount","totalPrice","danger","to","className","count","addToCart","text","color","productsState","productsDispatch","cartDispatch","useEffect","Item","data","products","updateProductCount","defaultValue","min","onChange","rowSelection","defaultSelected","selectedRowKeys","onSelect","selected","checked","onSelectAll","selectedProds","checkedCount","checkedPrice","App","href","height","viewBox","version","width","aria-hidden","fillRule","d","path","component","Products","exact","Boolean","window","location","hostname","match","nameSpace","reducer","setProducts","action","effects","getData","put","axios","method","url","localStorage","reduce","sum","prod","isChecked","push","product","find","item","price","deleteFromCart","index","findIndex","splice","updateAllProductChecked","forEach","updateProductChecked","Provider","createStore","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.308bd3e5.chunk.js","sourcesContent":["import React,{useState, useEffect} from 'react'\nimport { Link } from 'react-router-dom'\nimport { Popover, Button, Table, Badge, Affix } from 'antd';\nimport './style.css'\nimport {useStore, useGetter} from 'hokx'\n\nfunction columns(deleteProd){\n  return [\n    {\n      title: '商品',\n      dataIndex: 'name',\n      key: 'name',\n    },{\n      title: '价格',\n      dataIndex: 'price',\n      key: 'price',\n    },{\n      title: '数量',\n      dataIndex: 'count',\n      key: 'count',\n    },{\n      title: '操作',\n      key: 'action',\n      render: row => (\n        <Button size=\"small\" onClick={() => deleteProd(row.key)}>删除</Button>\n      ),\n    },\n  ]\n}\n\nconst content = (props) => {\n\n  const {state, dispatch} = useStore('cart')\n  const getter = useGetter('cart')\n\n  // 删除商品\n  let deleteProd = id => dispatch({type: 'deleteFromCart', prodId: id})\n\n  return(\n    <div>\n      <Table columns={columns(deleteProd)} dataSource={state.cartProducts} size=\"small\"/>\n      <p>共 {getter.totalCount} 件商品，共${getter.totalPrice}</p>\n      <Button type=\"primary\" size=\"small\" danger><Link to=\"/cart\">去购物车</Link></Button>\n    </div>\n  )\n};\n\nexport default (props) => {\n\n  const getter = useGetter('cart')\n\n  return (\n    <div className='popCart'>\n      <Popover content={content} title=\"购物车\">\n        <Badge count={getter.totalCount}>\n          <Button type=\"primary\">我的购物车</Button>\n        </Badge>\n      </Popover>\n    </div>\n  )\n}","import React,{useState, useEffect} from 'react'\nimport './style.css'\nimport { Breadcrumb, Table, Tag, Button } from 'antd';\nimport {useStore} from 'hokx'\n\nfunction columns(addToCart){\n  return [\n    {\n      title: '商品',\n      dataIndex: 'name',\n      key: 'name',\n      render: text => (<Tag color={'geekblue'}>{text}</Tag>),\n    },{\n      title: '价格',\n      dataIndex: 'price',\n      key: 'price',\n    },{\n      title: '操作',\n      key: 'action',\n      render: row => (<Button onClick={() => addToCart(row)}>加入购物车</Button>),\n    }\n  ]\n}\n\nexport default (props) => {\n\n  const {state: productsState, dispatch: productsDispatch} = useStore('products')\n  const {state: cartState, dispatch: cartDispatch} = useStore('cart')\n\n  // 获取商品数据\n  useEffect(() => productsDispatch({type:'getData'}),[])\n\n  // 添加商品至购物车\n  let addToCart = row => {\n    cartDispatch({type:'addToCart', data: row})\n  }\n\n  return (\n    <div className='products'>\n      <Breadcrumb>\n        <Breadcrumb.Item>首页</Breadcrumb.Item>\n        <Breadcrumb.Item>商品列表</Breadcrumb.Item>\n      </Breadcrumb><br/>\n      <Table columns={columns(addToCart)} dataSource={productsState.products} />\n    </div>\n  )\n}","import React,{useState, useEffect} from 'react'\nimport { Link } from 'react-router-dom'\nimport { Breadcrumb, Table, Tag, Button, InputNumber, Affix } from 'antd';\nimport './style.css'\nimport {useStore, useGetter} from 'hokx'\n\n// 列表字段\nfunction columns(updateProductCount, deleteProd){\n    return [\n        {\n            title: '商品',\n            dataIndex: 'name',\n            key: 'key',\n            render: text => <Tag color={'geekblue'}>{text}</Tag>,\n        },{\n            title: '单价',\n            dataIndex: 'price',\n            key: 'key',\n        },{\n            title: '数量',\n            dataIndex: 'count',\n            key: 'key',\n            render: (count, row) => <InputNumber defaultValue={count} min={1} onChange={count => updateProductCount(row.key, count)}/>\n        },{\n            title: '小计',\n            dataIndex: 'totalPrice',\n            key: 'key',\n        },{\n            title: '操作',\n            key: 'action',\n            render: row => <Button onClick={() => deleteProd(row.key)}>删除</Button>,\n        }\n    ]\n}\n\n// 列表属性\nfunction rowSelection(defaultSelected, dispatch){\n    return {\n        type: 'checkbox',\n        selectedRowKeys: defaultSelected,\n        onSelect: (row, selected) => {\n            dispatch({type: 'updateProductChecked', prodId: row.key, checked: selected})\n        },\n        onSelectAll: selected => {\n            dispatch({type: 'updateAllProductChecked', checked: selected})\n        },\n    }\n}\n\nexport default (props) => {\n\n    const {state, dispatch} = useStore('cart')\n    const getter = useGetter('cart')\n\n    // 增/减商品数量\n    let updateProductCount = (id, count) => {\n        dispatch({type: 'updateProductCount', prodId: id, count})\n    }\n\n    // 删除商品\n    let deleteProd = id => dispatch({type: 'deleteFromCart', prodId: id})\n\n    return (\n        <div className='cart'>\n            <Breadcrumb>\n                <Breadcrumb.Item><Link to=\"/\">首页</Link></Breadcrumb.Item>\n                <Breadcrumb.Item>购物车</Breadcrumb.Item>\n            </Breadcrumb><br/>\n            <Table rowSelection={rowSelection(getter.selectedProds, dispatch)}\n                    columns={columns(updateProductCount, deleteProd)}\n                    dataSource={state.cartProducts}\n            />\n            <p>已选 {getter.checkedCount} 件商品，总价：{getter.checkedPrice}</p>\n            <Button type=\"primary\" danger>结算</Button>\n        </div>\n    )\n}","import React,{useState, useEffect} from 'react'\nimport PopCart from './components/pop-cart'\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\n\nimport Products from './pages/products'\nimport Cart from './pages/cart'\n\nfunction App(props){\n    return (\n        <div id='app'>\n            <Router>\n                <div>\n                    <span className=\"title\"><strong>Hokx</strong> - 购物车示例</span>\n                    <a className=\"github\" href=\"https://github.com/koi-w/hokx-cart-demo\">\n                        <svg height=\"22\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"32\" aria-hidden=\"true\"><path fillRule=\"evenodd\" d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z\"></path></svg>\n                    </a>\n                    <PopCart />\n                </div>\n                <Route path='/' component={Products} exact></Route>\n                <Route path='/cart' render={props => <Cart {...props}/>} exact></Route>\n            </Router>\n        </div>\n    )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\n\nconst products = {\n    nameSpace: 'products',\n    state: {\n        products: []\n    },\n    reducer: {\n        setProducts(state, action){\n            state.products = action.data\n            return {...state}\n        }\n    },\n    effects: {\n        async getData({state,put}, action){\n            const { data } = await axios({\n                method: 'GET',\n                url: '/products.json'\n            })\n            put({type:'setProducts', data})\n        }\n    }\n}\n\nexport default products","import {createStore} from 'hokx'\n\nimport products from './products'\nimport cart from './cart'\n\nconst reducer = [products, cart]\nconst Provider = createStore(reducer)\n\nexport default Provider","const cart = {\n    nameSpace: 'cart',\n    localStorage: true,\n    state: {\n        cartProducts: [],\n    },\n    getter: {\n        totalCount(state){\n            return state.cartProducts.reduce((sum, prod) => sum + prod.count, 0)\n        },\n        totalPrice(state){\n            return state.cartProducts.reduce((sum, prod) => sum + prod.totalPrice, 0)\n        },\n        selectedProds(state){\n            return state.cartProducts.reduce((sum, prod) => {\n                prod.isChecked && sum.push(prod.key)\n                return sum\n            }, [])\n        },\n        checkedCount(state){\n            return state.cartProducts.reduce((sum, prod) => {\n                if (prod.isChecked) {\n                    sum += prod.count\n                }\n                return sum\n            }, 0)\n        },\n        checkedPrice(state){\n            return state.cartProducts.reduce((sum, prod) => {\n                if (prod.isChecked) {\n                    sum += prod.totalPrice\n                }\n                return sum\n            }, 0)\n        }\n    },\n    reducer: {\n        // 1. cartProducts 中没有该商品，把该商品添加到数组，并增加 count，isChecked，totalPrice\n        // 2. cartProducts 有该商品，让商品的数量加1，选中，计算小计\n        addToCart(state, action) {\n            let product = action.data\n            const prod = state.cartProducts.find(item => item.key === product.key)\n            if (prod) {\n                prod.count++\n                prod.isChecked = true\n                prod.totalPrice = prod.count * prod.price\n            } else {\n                state.cartProducts.push({\n                    ...product,\n                    count: 1,\n                    isChecked: true,\n                    totalPrice: product.price\n                })\n            }\n            // 直接push就是在修改引用的内存数据, 而引用地址没有变化, react会认为虚拟dom没有发生变化, 所以解构赋予新引用.\n            state.cartProducts = [...state.cartProducts]\n            return {...state}\n        },\n        deleteFromCart(state, action){\n            const index = state.cartProducts.findIndex(prod=> prod.key === action.prodId)\n            index !== -1 && state.cartProducts.splice(index, 1)\n            state.cartProducts = [...state.cartProducts]\n            return {...state}\n        },\n        updateProductCount(state, action){\n            const prod = state.cartProducts.find(prod => prod.key === action.prodId)\n            if(prod){\n                prod.count = action.count\n                prod.totalPrice = action.count * prod.price\n            }\n            return {...state}\n        },\n        updateAllProductChecked(state, action){\n            state.cartProducts.forEach(prod => {\n              prod.isChecked = action.checked\n            })\n            return {...state}\n        },\n        updateProductChecked(state, action){\n            const prod = state.cartProducts.find(prod => prod.key === action.prodId)\n            prod && (prod.isChecked = action.checked)\n            return {...state}\n        },\n    },\n    effects: {}\n}\n\nexport default cart","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './App.css'\nimport * as serviceWorker from './serviceWorker';\nimport Provider from './store'\n\nReactDOM.render(\n    <Provider>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}